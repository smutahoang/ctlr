package larc.ctlr.model;

import larc.ctlr.tool.*;

import java.io.BufferedWriter;
import java.util.Arrays;
import java.util.Random;
import org.apache.commons.math3.distribution.NormalDistribution;
import java.io.File;
import java.io.FileWriter;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;


public class MultithreadCTLR {
	public String datapath;
	public static Dataset dataset;
	public static int nTopics;
	public static int batch;

	public static double alpha;// prior for users' interest
	public static double beta; // prior for topics
	public static double sigma;// variance of users' authorities
	public static double delta;// variance of users' hubs
	public static double gamma; // variance of topic word distribution
	public static double epsilon = 0.000001;
	public static double lamda = 0.01;

	public Random rand;

	// Gibbs sampling variables
	// user-topic counts
	public int[][] n_zu = null; // n_zu[z][u]: number of times topic z is
								// observed in posts by user u
	public int[] sum_nzu = null; // sum_nzu[u] total number of topics that are
									// observed in posts by user u

	// topic-word counts
	public int[][] n_zw = null; // n_wz[z][w]: number of times word w is
								// generated by topic z in a post
	public int[] sum_nzw = null; // sum_nwz[z]: total number of times words that
									// are generated by topic z in a post

	// topic-word distribution
	public double[][] topicWordDist = null; // topicWordDist[k][w]: the
											// distribution of word w for topic
											// k. Sum of each words distribution
											// for each k = 1
	
	public double[][] optTopicWordDist = null; // optimized topicWordDist[k][w]
					

	// options for learning
	public static double lineSearch_alpha = 0.0001;
	public static double lineSearch_beta = 0.1;
	public static int lineSearch_MaxIterations = 12;
	public static double lineSearch_lambda;
	
	public static int maxIteration_topicalInterest = 10;
	public static int maxIteration_Authorities = 10;
	public static int maxIteration_Hubs = 10;
	public static int max_GibbsEM_Iterations =200;
	
	public int nParallelThreads = 10;
	public int[] threadStartIndexes = null;
	public int[] threadEndIndexes = null;
	
	private double postLastLogLikelidhood;
	private double postLastLogPerplexity;
	private double postOptLogLikelidhood;
	private double postOptLogPerplexity;

	static class ChildThread implements Runnable {

		private int threadStartIndex;
		private int threadEndIndex;
		private String runOption;

		public ChildThread(int start, int end, String run) {
			this.threadStartIndex = start;
			this.threadEndIndex = end;
			runOption = run;
		}	

		@Override
		public void run() {
			if (runOption.equals("optTopicInterests")) {
				optTopicalInterests(threadStartIndex, threadEndIndex);
			} else if (runOption.equals("optAuthorities")) {
				optAuthorities(threadStartIndex, threadEndIndex);
			} else if (runOption.equals("optHubs")) {
				optHubs(threadStartIndex, threadEndIndex);
			} 
		}

		private void optTopicalInterests(int startIndex, int endIndex) {
			for (int u = startIndex; u<endIndex; u++)
				altOptimize_topicalInterest(u);
		}
		
		private void optAuthorities(int startIndex, int endIndex) {
			for (int u = startIndex; u<endIndex; u++)
				altOptimize_Authorities(u);
		}
		
		private void optHubs(int startIndex, int endIndex) {
			for (int u = startIndex; u<endIndex; u++)
				altOptimize_Hubs(u);
		}
		
	}
	
	private void getThreadIndexes() {
		threadStartIndexes = new int[nParallelThreads];
		threadEndIndexes = new int[nParallelThreads];
		int chunkLength = Math.floorDiv(dataset.nUsers, nParallelThreads);
		for (int i = 0; i < nParallelThreads; i++) {
			threadStartIndexes[i] = i * chunkLength;
			threadEndIndexes[i] = threadStartIndexes[i] + chunkLength;
		}
		threadEndIndexes[nParallelThreads - 1] = dataset.nUsers;
	}
	
	/***
	 * 
	 * @param _datasetPath
	 * @param _nTopics
	 */
	public MultithreadCTLR(String _datasetPath, int _nTopics, int _batch) {
		this.datapath = _datasetPath;
		this.dataset = new Dataset(_datasetPath, _nTopics);
		this.nTopics = _nTopics;
		this.batch = _batch;
		n_zu = new int[nTopics][dataset.nUsers];
		sum_nzu = new int[dataset.nUsers];
		n_zw = new int[nTopics][dataset.vocabulary.length];
		sum_nzw = new int[nTopics];
		topicWordDist = new double[nTopics][dataset.vocabulary.length];
	}

	/***
	 * get likelihood of the whole dataset
	 * 
	 * @return
	 */
	private double getLikelihood() {
		// to be written
		// Compute the likelihood to make sure that it is improving L(text) +
		// L(link)
		// value can be more than 1
		// eqn 1 + 4

		double linkLikelihood = 0;
		double linkRelationshipLikelihood = 0;
		double linkAuthorityLikelihood = 0;
		double linkHubLikelihood = 0;
		double postLikelihood = 0;
		double postWordLikelihood = 0;
		double postTopicLikelihood = 0;
		double postThetaLikelihood = 0;
		double postTauLikelihood = 0;

		for (int u = 0; u < dataset.nUsers; u++) {
			User currUser = dataset.users[u];

			if (currUser.nonFollowers != null) {
				for (int i = 0; i < currUser.nonFollowers.length; i++) {
					int v = currUser.nonFollowers[i];
					User nonFollower = dataset.users[v];

					// Compute H_u * A_v
					double HuAv = 0;
					for (int z = 0; z < nTopics; z++) {
						HuAv += nonFollower.hubs[z] * currUser.authorities[z];
					}
					HuAv = HuAv * lamda;
					double fHuAv = 2 * ((1 / (Math.exp(-HuAv) + 1)) - 0.5);
					linkRelationshipLikelihood += Math.log10(1 - fHuAv);

					if (Double.isInfinite(linkRelationshipLikelihood)) {
						System.out.printf("[non-Followers] HuAv = %.12f fHuAv = %.12f\n", HuAv, fHuAv);
					}
				}
			}

			if (currUser.followers != null) {
				for (int i = 0; i < currUser.followers.length; i++) {
					int v = currUser.followers[i];
					User follower = dataset.users[v];

					// Compute H_u * A_v
					double HuAv = 0;
					for (int z = 0; z < nTopics; z++) {
						HuAv += follower.hubs[z] * currUser.authorities[z];
					}
					HuAv = HuAv * lamda;
					double fHuAv = 2 * ((1 / (Math.exp(-HuAv) + 1)) - 0.5);
					linkRelationshipLikelihood += Math.log10(fHuAv);

					if (Double.isInfinite(linkRelationshipLikelihood)) {
						System.out.printf("[followers] HuAv = %.12f fHuAv = %.12f\n", HuAv, fHuAv);
					}
				}
			}

			if (currUser.nonFollowings != null) {
				for (int i = 0; i < currUser.nonFollowings.length; i++) {
					// Only compute likelihood of non followings which are in
					// training
					// batch (i.e. batch = 1)
					if (currUser.nonFollowingBatches[i] == batch) {
						int v = currUser.nonFollowings[i];
						User nonFollowing = dataset.users[v];

						// Compute H_u * A_v
						double HuAv = 0;
						for (int z = 0; z < nTopics; z++) {
							HuAv += currUser.hubs[z] * nonFollowing.authorities[z];
						}
						HuAv = HuAv * lamda;
						double fHuAv = 2 * ((1 / (Math.exp(-HuAv) + 1)) - 0.5);
						linkRelationshipLikelihood += Math.log10(1.0 - fHuAv);
						if (Double.isInfinite(linkRelationshipLikelihood)) {
							System.out.printf("[non-followees] HuAv = %.12f fHuAv = %.12f\n", HuAv, fHuAv);
						}
					}
				}
			}

			// Compute following likelihood
			if (currUser.followings != null) {
				for (int i = 0; i < currUser.followings.length; i++) {
					// Only compute likelihood of followings which are in
					// training
					// batch
					// (i.e. batch = 1)
					if (currUser.followingBatches[i] == batch) {
						int v = currUser.followings[i];
						User following = dataset.users[v];

						// Compute H_u * A_v
						double HuAv = 0;
						for (int z = 0; z < nTopics; z++) {
							HuAv += currUser.hubs[z] * following.authorities[z];
						}
						HuAv = HuAv * lamda;
						double fHuAv = 2 * ((1 / (Math.exp(-HuAv) + 1)) - 0.5);
						linkRelationshipLikelihood += Math.log10(fHuAv);
						if (Double.isInfinite(linkRelationshipLikelihood)) {
							System.out.printf("[followees] HuAv = %.12f fHuAv = %.12f\n", HuAv, fHuAv);
						}
					}
				}
			}

			for (int k = 0; k < nTopics; k++) {
				//linkAuthorityLikelihood += (-Math.log10(sigma)
				//		- (Math.pow(Math.log10(currUser.authorities[k]) - currUser.topicalInterests[k], 2)
				//				/ (2 * Math.pow(sigma, 2))));
				linkAuthorityLikelihood += -Math.pow((Math.log10(currUser.authorities[k]) - currUser.topicalInterests[k]), 2) / (2 * Math.pow(delta, 2));
				
				if (Double.isInfinite(linkAuthorityLikelihood)) {
					System.out.printf("[authority] A[%d] = %.12f\n", k, currUser.authorities[k]);
				}
				//linkHubLikelihood += (-Math.log10(delta)
				//		- (Math.pow(Math.log10(currUser.hubs[k]) - currUser.topicalInterests[k], 2)
				//				/ (2 * Math.pow(delta, 2))));
				
				linkHubLikelihood += -Math.pow((Math.log10(currUser.hubs[k]) - currUser.topicalInterests[k]), 2) / (2 * Math.pow(sigma, 2));
				
				if (Double.isInfinite(linkHubLikelihood)) {
					System.out.printf("[authority] H[%d] = %.12f\n", k, currUser.hubs[k]);
				}
			}

			linkLikelihood += linkRelationshipLikelihood + linkAuthorityLikelihood + linkHubLikelihood;

			for (int s = 0; s < currUser.nPosts; s++) {
				if (currUser.postBatches[s] == batch) {
					Post currPost = currUser.posts[s];
					for (int w = 0; w < currPost.words.length; w++) {
						int word = currPost.words[w];
						postWordLikelihood += Math.log10(topicWordDist[currPost.topic][word]);
					}
					postTopicLikelihood += Math.log10(currUser.topicalInterests[currPost.topic]);
					if (Double.isInfinite(postTopicLikelihood)) {
						System.out.printf("[Post] Theta[%d] = %.12f\n", currPost.topic,
								currUser.topicalInterests[currPost.topic]);
					}
				}
			}

			for (int k = 0; k < nTopics; k++) {
				postThetaLikelihood += (alpha - 1) * Math.log10(currUser.topicalInterests[k]);
			}
		}

		for (int k = 0; k < nTopics; k++) {
			for (int w = 0; w < dataset.vocabulary.length; w++) {
				postTauLikelihood += (gamma - 1) * Math.log10(topicWordDist[k][w]);
			}
		}

		// postLikelihood = postWordLikelihood + postTopicLikelihood +
		// postThetaLikelihood + postTauLikelihood;
		postLikelihood = postWordLikelihood + postTopicLikelihood;

		if (Double.isInfinite(linkLikelihood) || Double.isInfinite(postLikelihood)) {
			System.exit(-1);
		}

		return (linkLikelihood + postLikelihood);
	}

	/***
	 * compute likelihood of data as a function of topical interest of u when
	 * the interest is x, i.e., if L(data|parameters) = f(theta_u) +
	 * const-of-theta_u then this function returns f(x)
	 * 
	 * @param u
	 * @return
	 */
	private static double getLikelihood_topicalInterest(int u, double[] x) {
		// Refer to Eqn 9 in Learning paper for Formula

		double authorityLikelihood = 0;
		double hubLikelihood = 0;
		double postLikelihood = 0;
		double topicLikelihood = 0;
		double finalLikelihood = 0;

		// Set the current user to be u
		User currUser = dataset.users[u];

		for (int k = 0; k < nTopics; k++) {
			authorityLikelihood += -Math.pow((Math.log10(currUser.authorities[k]) - x[k]), 2) / (2 * Math.pow(delta, 2));
		}

		for (int k = 0; k < nTopics; k++) {
			hubLikelihood += -Math.pow((Math.log10(currUser.hubs[k]) - x[k]), 2) / (2 * Math.pow(sigma, 2));
		}

		for (int i = 0; i < currUser.nPosts; i++) {
			// Only compute post likelihood of posts which are in batch (i.e.
			// training batch = 1)
			if (currUser.postBatches[i] == batch) {
				int postTopic = currUser.posts[i].topic;
				// postLikelihood += x[postTopic];
				postLikelihood += Math.log10(x[postTopic]);
			}
		}

		for (int k = 0; k < nTopics; k++) {
			topicLikelihood += (alpha - 1) * Math.log10(x[k]);
		}
		// finalLikelihood = authorityLikelihood + hubLikelihood +
		// postLikelihood + topicLikelihood;

		/*
		 * System.out.printf(
		 * "[TopicLikelihood] u = %d authorityLikelihood = %f hubLikelihood = %f postLikelihood = %f\n"
		 * , u, authorityLikelihood, hubLikelihood, postLikelihood);
		 */

		//finalLikelihood = authorityLikelihood + hubLikelihood + postLikelihood + topicLikelihood;
		finalLikelihood = authorityLikelihood + hubLikelihood + postLikelihood;
		return finalLikelihood;
	}

	/***
	 * compute gradient of likelihood of data with respect to interest of u in
	 * topic k when the interest is x, i.e., if if L(data|parameters) =
	 * f(theta_u) + const-of-theta_u then this function return df/dtheta_uk at
	 * theta_uk = x
	 * 
	 * @param u
	 * @param k
	 * @param x
	 * @return
	 */
	private static double gradLikelihood_topicalInterest(int u, int k, double x) {
		// Refer to Eqn 11 in Learning paper

		double authorityLikelihood = 0;
		double hubLikelihood = 0;
		double postLikelihood = 0;
		double gradLikelihood = 0;

		// Set the current user to be u
		User currUser = dataset.users[u];

		authorityLikelihood = ((Math.log10(currUser.authorities[k]) - x) / Math.pow(delta, 2));

		hubLikelihood = ((Math.log10(currUser.hubs[k]) - x) / Math.pow(sigma, 2));

		for (int i = 0; i < currUser.nPosts; i++) {
			// Only compute post likelihood of posts which are in batch
			// (i.e. training batch = 1)
			if (currUser.postBatches[i] == batch) {
				// Only consider posts which are assigned topic k (i.e. z_{v,s}
				// = k)
				if (currUser.posts[i].topic == k) {
					// postLikelihood += 1;
					postLikelihood += 1 / x;
				}
			}
		}

		//gradLikelihood = authorityLikelihood + hubLikelihood + postLikelihood + ((alpha -1) / x);
		gradLikelihood = authorityLikelihood + hubLikelihood + postLikelihood;

		/*
		 * System.out.printf(
		 * "[Grad-TopicLikelihood] u = %d authorityLikelihood = %f hubLikelihood = %f postLikelihood = %f\n"
		 * , u, authorityLikelihood, hubLikelihood, postLikelihood);
		 */

		return gradLikelihood;
	}

	/***
	 * get projection of x on n-dimension simplex i.e., find the n-dimension
	 * probability distribution closest to x
	 * 
	 * @param x
	 * @param n
	 * @return
	 */
	private static double[] simplexProjection(double[] x, double z) {
		// given all the k that u have, it adds up to 1
		// Refer to https://github.com/blei-lab/ctr/blob/master/opt.cpp
		double[] projX = new double[x.length];

		// copy the content of x into projX
		for (int i = 0; i < x.length; i++) {
			projX[i] = x[i];
		}
		// Sort projX in asc order
		Arrays.sort(projX);

		// Compute the sum of the offset
		double cumsum = -z;
		double p = 0;
		int j = 0;
		for (int i = x.length - 1; i >= 0; i--) {
			p = x[i];
			cumsum += p;
			if (p > cumsum / (j + 1)) {
				j++;
			} else {
				break;
			}
		}

		// Compute the offset for each topic
		double theta = cumsum / j;
		for (int i = 0; i < x.length; i++) {
			p = x[i] - theta;
			if (p < 0) {
				p = 0.0;
				// p = epsilon;
			}
			projX[i] = p;
		}

		double sum_x = 0;
		for (int i = 0; i < projX.length; i++) {
			sum_x += projX[i];
		}

		for (int i = 0; i < projX.length; i++) {
			projX[i] = projX[i] / sum_x;
		}

		return projX;
	}

	/***
	 * alternating step to optimize topical interest of u
	 * 
	 * @param u
	 */
	static void altOptimize_topicalInterest(int u) {
		double[] grad = new double[nTopics];
		double[] currentX = dataset.users[u].topicalInterests;
		double[] x = new double[nTopics];

		double currentF = 0 - getLikelihood_topicalInterest(u, currentX);

		boolean flag = true;
		double delta = 0;
		double f = Double.MAX_VALUE;

		// parameters for line search
		//lineSearch_alpha = 0.0001;
		//lineSearch_beta = 0.1;
		//lineSearch_MaxIterations = 5;

		for (int iter = 0; iter < maxIteration_topicalInterest; iter++) {
			// compute gradient
			for (int k = 0; k < nTopics; k++) {
				grad[k] = 0 - gradLikelihood_topicalInterest(u, k, currentX[k]);
			}
			// start line search
			lineSearch_lambda = lineSearch_beta;
			flag = false;

			for (int lineSearchIter = 0; lineSearchIter < lineSearch_MaxIterations; lineSearchIter++) {
				// find new x
				for (int k = 0; k < nTopics; k++) {
					x[k] = currentX[k] - lineSearch_lambda * grad[k];
				}

				x = simplexProjection(x, 1);// this step to make sure that we

				// compute f at the new x
				f = 0 - getLikelihood_topicalInterest(u, x);

				// compute ||currentX - x||^2
				delta = 0;
				for (int k = 0; k < nTopics; k++) {
					delta += Math.pow(currentX[k] - x[k], 2);
				}
				// check the condition to stop line search
				if (f - currentF <= (-lineSearch_alpha / lineSearch_lambda) * delta) {
					flag = true;
					break;
				} else {
					lineSearch_lambda *= lineSearch_beta;
				}
			}
			if (flag) {// line search successful
				currentF = f;
				for (int k = 0; k < nTopics; k++) {
					currentX[k] = x[k];
				}
				// to see if F actually reduce after every iteration
				// System.out.printf("alt_topic: u = %d iter = %d f = %f\n", u,
				// iter, f);
			} else {
				// to see if F actually reduce after every iteration
				 //System.out.printf("alt_topic: u = %d iter = %d f = %f\n", u,
				 //iter, f);
				break;// cannot improve further
			}
		}
	}

	/***
	 * compute likelihood of data as a function of authority of u when the
	 * authority is x, i.e., if L(data|parameters) = f(A_u) + const-of-A_u then
	 * this function returns f(x)
	 * 
	 * @param v
	 * @param x[]
	 * @return
	 */
	private static double getLikelihood_authority(int v, double[] x) {
		// Refer to Eqn 13 in Learning paper

		double followerLikelihood = 0;
		double nonFollowerLikelihood = 0;
		double postLikelihood = 0;
		double likelihood = 0;

		// Set the current user to be v
		User currUser = dataset.users[v];

		// Compute non follower likelihood
		if (currUser.nonFollowers != null) {
			for (int i = 0; i < currUser.nonFollowers.length; i++) {
				int u = currUser.nonFollowers[i];
				User nonFollower = dataset.users[u];

				// Compute H_u * A_v
				double HuAv = 0;
				for (int z = 0; z < nTopics; z++) {
					HuAv += nonFollower.hubs[z] * x[z];// now A_v is x
				}
				HuAv = HuAv * lamda;
				// System.out.println("HuAv:"+HuAv);
				double fHuAv = 2 * ((1 / (Math.exp(-HuAv) + 1)) - 0.5);
				// System.out.println("fHuAv:"+fHuAv);
				nonFollowerLikelihood += Math.log10(1 - fHuAv);
			}
		}

		// Compute follower likelihood
		if (currUser.followers != null) {
			for (int i = 0; i < currUser.followers.length; i++) {
				int u = currUser.followers[i];
				User follower = dataset.users[u];

				// Compute H_u * A_v
				double HuAv = 0;
				for (int z = 0; z < nTopics; z++) {
					HuAv += follower.hubs[z] * x[z];// now A_v is x
				}
				HuAv = HuAv * lamda;
				double fHuAv = 2 * ((1 / (Math.exp(-HuAv) + 1)) - 0.5);
				followerLikelihood += Math.log10(fHuAv);
			}
		}

		// Compute post likelihood
		for (int k = 0; k < nTopics; k++) {
			postLikelihood += Math.pow((Math.log10(x[k]) - currUser.topicalInterests[k]), 2) / (2 * Math.pow(sigma, 2));
		}

		likelihood = nonFollowerLikelihood + followerLikelihood - postLikelihood;
		// System.out.println("Num of Non Followers:" +
		// currUser.nonFollowers.length);
		// System.out.println("NonFollowersLikelihood:" +
		// nonFollowerLikelihood);
		// System.out.println("Num of Followers:" + currUser.followers.length);
		// System.out.println("FollowerLikelihood:" + followerLikelihood);
		// System.out.println("PostLikelihood:" + postLikelihood);

		return likelihood;
	}

	/***
	 * compute gradient of likelihood of data with respect to authority of u in
	 * topic k when the authority is x, i.e., if if L(data|parameters) = f(A_u)
	 * + const-of-A_u then this function return df/dA_uk at A_uk = x
	 * 
	 * @param v
	 * @param k
	 * @param x
	 * @return
	 */
	private static double gradLikelihood_authority(int v, int k, double x) {
		// Refer to Eqn 15 in Learning paper

		double followerLikelihood = 0;
		double nonFollowerLikelihood = 0;
		double postLikelihood = 0;
		double gradLikelihood = 0;

		// Set the current user to be v
		User currUser = dataset.users[v];

		// Compute non follower likelihood
		if (currUser.nonFollowers != null) {
			for (int i = 0; i < currUser.nonFollowers.length; i++) {
				int u = currUser.nonFollowers[i];
				User nonFollower = dataset.users[u];

				// Compute H_u * A_v
				double HuAv = 0;
				for (int z = 0; z < nTopics; z++) {
					if (z == k) {
						HuAv += nonFollower.hubs[z] * x;
					} else {
						HuAv += nonFollower.hubs[z] * currUser.authorities[z];
					}
				}
				HuAv = HuAv * lamda;
				nonFollowerLikelihood += -(lamda * nonFollower.hubs[k])
						- 1 / (Math.exp(-HuAv) + 1) * Math.exp(-HuAv) * -(lamda * nonFollower.hubs[k]);
			}
		}

		// Compute follower likelihood
		if (currUser.followers != null) {
			for (int i = 0; i < currUser.followers.length; i++) {
				int u = currUser.followers[i];
				User follower = dataset.users[u];

				// Compute H_u * A_v
				double HuAv = 0;
				for (int z = 0; z < nTopics; z++) {
					if (z == k) {
						HuAv += follower.hubs[z] * x;
					} else {
						HuAv += follower.hubs[z] * currUser.authorities[z];
					}
				}
				HuAv = HuAv * lamda;
				followerLikelihood += ((1 / (1 - Math.exp(-HuAv))) * -Math.exp(-HuAv) * -(lamda * follower.hubs[k]))
						- ((1 / (Math.exp(-HuAv) + 1)) * Math.exp(-HuAv) * -(lamda * follower.hubs[k]));
			}
		}

		postLikelihood = ((Math.log10(x) - currUser.topicalInterests[k]) / Math.pow(sigma, 2)) * (1 / x);

		gradLikelihood = nonFollowerLikelihood + followerLikelihood - postLikelihood;

		return gradLikelihood;
	}

	/***
	 * alternating step to optimize authorities of user u
	 * 
	 * @param u
	 */
	static void altOptimize_Authorities(int u) {
		double[] grad = new double[nTopics];
		double[] currentX = dataset.users[u].authorities;
		double[] x = new double[nTopics];

		double currentF = 0 - getLikelihood_authority(u, currentX);

		boolean flag = true;
		double delta = 0;
		double f = Double.MAX_VALUE;

		// parameters for line search
		//lineSearch_alpha = 0.0001;
		//lineSearch_beta = 0.1;
		//lineSearch_MaxIterations = 5;

		for (int iter = 0; iter < maxIteration_Authorities; iter++) {
			// compute gradient
			for (int k = 0; k < nTopics; k++) {
				grad[k] = 0 - gradLikelihood_authority(u, k, currentX[k]);
			}
			// start line search
			lineSearch_lambda = lineSearch_beta;
			flag = false;

			for (int lineSearchIter = 0; lineSearchIter < lineSearch_MaxIterations; lineSearchIter++) {
				// find new x
				for (int k = 0; k < nTopics; k++) {
					x[k] = currentX[k] - lineSearch_lambda * grad[k];
					if (x[k] < epsilon) {
						x[k] = epsilon;
					}
				}

				// compute f at the new x
				f = 0 - getLikelihood_authority(u, x);

				// compute ||currentX - x||^2
				delta = 0;
				for (int k = 0; k < nTopics; k++) {
					delta += Math.pow(currentX[k] - x[k], 2);
				}
				// check the condition to stop line search
				if (f - currentF <= (-lineSearch_alpha / lineSearch_lambda) * delta) {
					flag = true;
					break;
				} else {
					lineSearch_lambda *= lineSearch_beta;
				}
			}
			if (flag) {// line search successful
				currentF = f;
				for (int k = 0; k < nTopics; k++) {
					currentX[k] = x[k];
				}
				// to see if F actually reduce after every iteration
				// System.out.printf("alt_authority: u = %d iter = %d f = %f\n",
				// u, iter, f);
			} else {
				// to see if F actually reduce after every iteration
				// System.out.printf("alt_authority: u = %d iter = %d f = %f\n",
				// u, iter, f);
				break;// cannot improve further
			}
		}
	}

	/***
	 * compute likelihood of data as a function of hub of u when the hub is x,
	 * i.e., if L(data|parameters) = f(H_u) + const-of-H_u then this function
	 * returns f(x)
	 * 
	 * @param u
	 * @param x[]
	 * @return
	 */
	private static double getLikelihood_hub(int u, double[] x) {
		// Refer to Eqn 17 in Learning paper

		double followingLikelihood = 0;
		double nonFollowingLikelihood = 0;
		double postLikelihood = 0;
		double likelihood = 0;

		// Set the current user to be u
		User currUser = dataset.users[u];

		// Compute non following likelihood
		if (currUser.nonFollowings != null) {
			for (int i = 0; i < currUser.nonFollowings.length; i++) {
				// Only compute likelihood of non followings which are in
				// training
				// batch (i.e. batch = 1)
				if (currUser.nonFollowingBatches[i] == batch) {
					int v = currUser.nonFollowings[i];
					User nonFollowing = dataset.users[v];

					// Compute H_u * A_v
					double HuAv = 0;
					for (int z = 0; z < nTopics; z++) {
						HuAv += x[z] * nonFollowing.authorities[z];
					}
					HuAv = HuAv * lamda;
					double fHuAv = 2 * ((1 / (Math.exp(-HuAv) + 1)) - 0.5);
					nonFollowingLikelihood += Math.log10(1.0 - fHuAv);
					;
				}
			}
		}

		// Compute following likelihood
		if (currUser.followings != null) {
			for (int i = 0; i < currUser.followings.length; i++) {
				// Only compute likelihood of followings which are in training
				// batch
				// (i.e. batch = 1)
				if (currUser.followingBatches[i] == batch) {
					int v = currUser.followings[i];
					User following = dataset.users[v];

					// Compute H_u * A_v
					double HuAv = 0;
					for (int z = 0; z < nTopics; z++) {
						HuAv += x[z] * following.authorities[z];
					}
					HuAv = HuAv * lamda;
					double fHuAv = 2 * ((1 / (Math.exp(-HuAv) + 1)) - 0.5);
					followingLikelihood += Math.log10(fHuAv);
				}
			}
		}

		// Compute post likelihood
		for (int k = 0; k < nTopics; k++) {
			postLikelihood += Math.pow(Math.log10(x[k]) - currUser.topicalInterests[k], 2) / (2 * Math.pow(delta, 2));
		}

		likelihood = nonFollowingLikelihood + followingLikelihood - postLikelihood;

		return likelihood;
	}

	/***
	 * compute gradient of likelihood of data with respect to hub of u in topic
	 * k when the hub is x, i.e., if if L(data|parameters) = f(H_u) +
	 * const-of-H_u then this function return df/dH_uk at H_uk = x
	 * 
	 * @param u
	 * @param k
	 * @param x
	 * @return
	 */
	private static double gradLikelihood_hub(int u, int k, double x) {
		// Refer to Eqn 19 in Learning paper

		double followingLikelihood = 0;
		double nonFollowingLikelihood = 0;
		double postLikelihood = 0;
		double gradLikelihood = 0;

		// Set the current user to be u
		User currUser = dataset.users[u];

		// Compute non following likelihood
		if (currUser.nonFollowings != null) {
			for (int i = 0; i < currUser.nonFollowings.length; i++) {
				// Only compute likelihood of non followings which are in
				// training
				// batch (i.e. batch = 1)
				if (currUser.nonFollowingBatches[i] == batch) {
					int v = currUser.nonFollowings[i];
					User nonFollowing = dataset.users[v];

					// Compute H_u * A_v
					double HuAv = 0;
					for (int z = 0; z < nTopics; z++) {
						if (z == k) {
							HuAv += x * nonFollowing.authorities[z];
						} else {
							HuAv += currUser.hubs[z] * nonFollowing.authorities[z];
						}
					}
					HuAv = HuAv * lamda;
					nonFollowingLikelihood += -(lamda * nonFollowing.authorities[k])
							- 1 / (Math.exp(-HuAv) + 1) * Math.exp(-HuAv) * -(lamda * nonFollowing.authorities[k]);
				}
			}
		}

		// Compute following likelihood
		if (currUser.followings != null) {
			for (int i = 0; i < currUser.followings.length; i++) {
				// Only compute likelihood of followings which are in training
				// batch
				// (i.e. batch = 1)
				if (currUser.followingBatches[i] == batch) {
					int v = currUser.followings[i];
					User following = dataset.users[v];

					// Compute H_u * A_v
					double HuAv = 0;
					for (int z = 0; z < nTopics; z++) {
						if (z == k) {
							HuAv += x * following.authorities[z];
						} else {
							HuAv += currUser.hubs[z] * following.authorities[z];
						}
					}
					HuAv = HuAv * lamda;
					followingLikelihood += ((1 / (1 - Math.exp(-HuAv))) * -Math.exp(-HuAv)
							* -(lamda * following.authorities[k]))
							- ((1 / (Math.exp(-HuAv) + 1)) * Math.exp(-HuAv) * -(lamda * following.authorities[k]));
				}
			}
		}

		postLikelihood = ((Math.log10(x) - currUser.topicalInterests[k]) / Math.pow(delta, 2)) * (1 / x);

		gradLikelihood = nonFollowingLikelihood + followingLikelihood - postLikelihood;

		return gradLikelihood;
	}

	/***
	 * alternating step to optimize hubs of user u
	 * 
	 * @param u
	 */
	static void altOptimize_Hubs(int u) {
		// the following code is just a draft, to be corrected.
		// will need more checking, but roughly the gradient descent
		// for learning A_u consists of the following main steps
		double[] grad = new double[nTopics];
		double[] currentX = dataset.users[u].hubs;
		double[] x = new double[nTopics];

		double currentF = 0 - getLikelihood_hub(u, currentX);

		boolean flag = true;
		double delta = 0;
		double f = Double.MAX_VALUE;

		// parameters for line search
		//lineSearch_alpha = 0.0001;
		//lineSearch_beta = 0.1;
		//lineSearch_MaxIterations = 5;

		for (int iter = 0; iter < maxIteration_Hubs; iter++) {
			// compute gradient
			for (int k = 0; k < nTopics; k++) {
				grad[k] = 0 - gradLikelihood_hub(u, k, currentX[k]);
			}
			// start line search
			lineSearch_lambda = lineSearch_beta;
			flag = false;

			for (int lineSearchIter = 0; lineSearchIter < lineSearch_MaxIterations; lineSearchIter++) {
				// find new x
				for (int k = 0; k < nTopics; k++) {
					x[k] = currentX[k] - lineSearch_lambda * grad[k];
					if (x[k] < epsilon) {
						x[k] = epsilon;
					}
				}

				// compute f at the new x
				f = 0 - getLikelihood_hub(u, x);

				// compute ||currentX - x||^2
				delta = 0;
				for (int k = 0; k < nTopics; k++) {
					delta += Math.pow(currentX[k] - x[k], 2);
				}
				// check the condition to stop line search
				if (f - currentF <= (-lineSearch_alpha / lineSearch_lambda) * delta) {
					flag = true;
					break;
				} else {
					lineSearch_lambda *= lineSearch_beta;
				}
			}
			if (flag) {// line search successful
				currentF = f;
				for (int k = 0; k < nTopics; k++) {
					currentX[k] = x[k];
				}
				// to see if F actually reduce after every iteration
				// System.out.printf("alt_hub: u = %d iter = %d f = %f\n", u,
				// iter, f);
			} else {
				// to see if F actually reduce after every iteration
				// System.out.printf("alt_hub: u = %d iter = %d f = %f\n", u,
				// iter, f);
				break;// cannot improve further
			}
		}
	}

	/***
	 * alternating step to optimize topics' word distribution
	 */
	private void altOptimize_topics() {
		// initialize the count variables
		for (int k = 0; k < nTopics; k++) {
			sum_nzw[k] = 0;
			for (int w = 0; w < dataset.vocabulary.length; w++) {
				n_zw[k][w] = 0;
			}
		}

		// update count variable base on the post topic assigned
		for (int u = 0; u < dataset.nUsers; u++) {
			User currUser = dataset.users[u];
			for (int n = 0; n < currUser.posts.length; n++) {
				Post currPost = currUser.posts[n];

				// only consider posts in batch
				if (currUser.postBatches[n] == batch) {
					int z = currPost.topic;
					for (int w = 0; w < currPost.words.length; w++) {
						int wordIndex = currPost.words[w];
						sum_nzw[z] += 1;
						n_zw[z][wordIndex] += 1;
					}
				}
			}
		}

		// compute topic word distribution
		for (int k = 0; k < nTopics; k++) {
			for (int w = 0; w < dataset.vocabulary.length; w++) {
				topicWordDist[k][w] = (n_zw[k][w] + gamma) / (sum_nzw[k] + (gamma * dataset.vocabulary.length));
			}
		}
	}

	/***
	 * to sample topic for post n of user u
	 * 
	 * @param u
	 * @param n
	 */
	private void sampleTopic(int u, int n) {
		// Set the current user to be u
		User currUser = dataset.users[u];

		double sump = 0;
		// p: p(z_u,s = z| rest)

		double[] p = new double[nTopics];
		double max = -Double.MAX_VALUE;
		for (int z = 0; z < nTopics; z++) {
			// User-topic
			p[z] = Math.log10(currUser.topicalInterests[z]);

			// topic-word
			Post currPost = currUser.posts[n];
			for (int w = 0; w < currPost.words.length; w++) {
				int word = currPost.words[w];
				p[z] += Math.log10(topicWordDist[z][word]);
			}

			// update min
			if (max < p[z]) {
				max = p[z];
			}

		}
		// convert log(sump) to probability
		for (int z = 0; z < nTopics; z++) {
			p[z] = p[z] - max;
			p[z] = Math.exp(p[z]);

			// cumulative
			p[z] = sump + p[z];
			sump = p[z];
		}

		sump = rand.nextDouble() * sump;
		for (int z = 0; z < nTopics; z++) {
			if (sump > p[z]){
				continue;
			} else{
			// Sample topic
				currUser.posts[n].topic = z;
//				if (currUser.topicalInterests[z] <= 10E-12) {
//					System.err.println("Something wrong!!! ");
//					for (int k = 0; k < nTopics; k++) {
//						System.out.printf("p[%d] = %.12f sump = %.12f\n", k, p[k], sump);
//						System.out.printf("z = %d",z);
//					}
//				System.exit(-1);
//				}
				return;
			}
		}

	}

	/***
	 * initialize the data before training
	 */
	public void init() {
		alpha = (double)(50)/(double)(nTopics);// prior for users' interest
		gamma = 0.001;
		beta = 0.001; // prior for topics
		sigma = 0.2;// variance of users' authorities
		delta= 0.2;// variance of users' hubs
		
		rand = new Random();
		// initialize the count variables
		for (int u = 0; u < dataset.nUsers; u++) {
			sum_nzu[u] = 0;
			for (int k = 0; k < nTopics; k++) {
				n_zu[k][u] = 0;
			}
		}

		// randomly assign topics to posts
		for (int u = 0; u < dataset.nUsers; u++) {
			User currUser = dataset.users[u];
			for (int n = 0; n < currUser.posts.length; n++) {
				// only consider posts in batch
				if (currUser.postBatches[n] == batch) {
					int randTopic = rand.nextInt(nTopics);
					currUser.posts[n].topic = randTopic;
					sum_nzu[u] += 1;
					n_zu[randTopic][u] += 1;
				}
			}
		}

		// compute user topical interests base on the random topic assigment
		for (int u = 0; u < dataset.nUsers; u++) {
			User currUser = dataset.users[u];
			for (int k = 0; k < nTopics; k++) {
				currUser.topicalInterests[k] = (n_zu[k][u] + alpha) / (sum_nzu[u] + (alpha * dataset.nUsers));
			}
		}

		// randomly regress user's topical interest to initialize authority and
		// hub
		for (int u = 0; u < dataset.nUsers; u++) {
			User currUser = dataset.users[u];
			for (int k = 0; k < nTopics; k++) {

				NormalDistribution g = new NormalDistribution(currUser.topicalInterests[k], sigma);
				currUser.authorities[k] = Math.exp(g.sample());

				g = new NormalDistribution(currUser.topicalInterests[k], delta);
				currUser.hubs[k] = Math.exp(g.sample());

			}
		}

		// compute topic words distribution base on the random topic assigment
		altOptimize_topics();

	}

	/***
	 * modeling learning
	 */
	public void train() {
		init();
		getThreadIndexes();
		ExecutorService executor = null;
		double maxLikelihood = 0;
		double currentLikelihood = 0;
		System.out.println("Datapath:"+this.datapath);
		System.out.println("Alpha:"+this.alpha);
		System.out.println("Line Search Alpha:"+this.lineSearch_alpha);
		System.out.println("Line Search Beta:"+this.lineSearch_beta);
		System.out.println("Line Search Max Iterations:"+this.lineSearch_MaxIterations);
		System.out.println("#Topics:"+this.nTopics);
		for (int iter = 0; iter < max_GibbsEM_Iterations; iter++) {
			// EM part that employs alternating optimization
			executor = Executors.newFixedThreadPool(nParallelThreads);
			for (int i = 0; i < threadStartIndexes.length; i++) {
				Runnable worker = new ChildThread(threadStartIndexes[i], threadEndIndexes[i], 
						"optTopicInterests");
				executor.execute(worker);
			}
			executor.shutdown();
			
			executor = Executors.newFixedThreadPool(nParallelThreads);
			for (int i = 0; i < threadStartIndexes.length; i++) {
				Runnable worker = new ChildThread(threadStartIndexes[i], threadEndIndexes[i], 
						"optAuthorities");
				executor.execute(worker);
			}
			executor.shutdown();
			
			executor = Executors.newFixedThreadPool(nParallelThreads);
			for (int i = 0; i < threadStartIndexes.length; i++) {
				Runnable worker = new ChildThread(threadStartIndexes[i], threadEndIndexes[i], 
						"optHubs");
				executor.execute(worker);
			}
			executor.shutdown();
			
			altOptimize_topics();
			
			// Gibbs part
			for (int u = 0; u < dataset.nUsers; u++) {
				for (int n = 0; n < dataset.users[u].nPosts; n++) {
					// only consider posts in batch
					if (dataset.users[u].postBatches[n] == batch) {
						sampleTopic(u, n);
					}
				}
			}
			//set first Likelihood as the maxLikelihood
			currentLikelihood = getLikelihood();
			if (iter==0){
				maxLikelihood = currentLikelihood;
				optTopicWordDist = topicWordDist;
				//set optimized user topical interest, authority and hub
				for (int u = 0; u < dataset.nUsers; u++) {
					User currUser = dataset.users[u];
					currUser.optTopicalInterests = currUser.topicalInterests;
					currUser.optAuthorities = currUser.authorities;
					currUser.optHubs = currUser.hubs;
				}
			} else{
				if (maxLikelihood<currentLikelihood){
					maxLikelihood = currentLikelihood;
					//set optimized topicWordDist to be the current TopicWordsDist
					optTopicWordDist = topicWordDist;
					//set optimized user topical interest, authority and hub
					for (int u = 0; u < dataset.nUsers; u++) {
						User currUser = dataset.users[u];
						currUser.optTopicalInterests = currUser.topicalInterests;
						currUser.optAuthorities = currUser.authorities;
						currUser.optHubs = currUser.hubs;
					}
				}
			}
			
			System.out.printf("likelihood after %d steps: %f, max %f ", iter, currentLikelihood, maxLikelihood);
			System.out.println();
		}
		getOptLikelihoodPerplexity();
		getLastLikelihoodPerplexity();
		
		// print out the learned parameters
		output_OptTopicInterest();
		output_OptAuthority();
		output_OptHub();
		output_OptPostTopicTopWords(50);
		output_OptLikelihoodPerplexity();
		output_LastTopicInterest();
		output_LastAuthority();
		output_LastHub();
		output_LastPostTopicTopWords(20);
		output_LastLikelihoodPerplexity();
		//output_OptTopicWord();
		output_optPostTopic();
	}

	private double getOptPostLikelihood(int u, int j) {
		//Compute likelihood of post number j of user number u
		double logLikelihood = 0;
		for (int i = 0; i < dataset.users[u].posts[j].nWords; i++) {
			int w = dataset.users[u].posts[j].words[i];
			//Probability that word i is generated by other topics
			double p = 0;
			for (int z = 0; z < nTopics; z++) {
				double p_z = optTopicWordDist[z][w] * dataset.users[u].optTopicalInterests[z];
				p = p + p_z;		
			}
			logLikelihood = logLikelihood + Math.log10(p);
		}

		return logLikelihood;
	}
	
	private double getLastPostLikelihood(int u, int j) {
		//Compute likelihood of post number j of user number u
		double logLikelihood = 0;
		for (int i = 0; i < dataset.users[u].posts[j].nWords; i++) {
			int w = dataset.users[u].posts[j].words[i];
			//Probability that word i is generated by other topics
			double p = 0;
			for (int z = 0; z < nTopics; z++) {
				double p_z = topicWordDist[z][w] * dataset.users[u].topicalInterests[z];
				p = p + p_z;
			}
			logLikelihood = logLikelihood + Math.log10(p);
		}

		return logLikelihood;
	}
	
	private void getOptLikelihoodPerplexity() {
		postOptLogLikelidhood = 0;
		postOptLogPerplexity = 0;
		int nTestPost = 0;
		for (int u = 0; u < dataset.nUsers; u++) {
			for (int t = 0; t < dataset.users[u].nPosts; t++) {
				double logLikelihood = getOptPostLikelihood(u, t);
				if (dataset.users[u].postBatches[t] == batch)
					postOptLogLikelidhood += logLikelihood;
				else {
					postOptLogPerplexity += (-logLikelihood);
					nTestPost++;
				}
			}
		}
		postOptLogPerplexity /= nTestPost;
	}
	
	private void getLastLikelihoodPerplexity() {
		postLastLogLikelidhood = 0;
		postLastLogPerplexity = 0;
		int nTestPost = 0;
		for (int u = 0; u < dataset.nUsers; u++) {
			for (int t = 0; t < dataset.users[u].nPosts; t++) {
				double logLikelihood = getLastPostLikelihood(u, t);
				if (dataset.users[u].postBatches[t] == batch)
					postLastLogLikelidhood += logLikelihood;
				else {
					postLastLogPerplexity += (-logLikelihood);
					nTestPost++;
				}
			}
		}
		postLastLogPerplexity /= nTestPost;
	}
	
	public void output_OptTopicWord() {
		try {
			File f = new File(dataset.path+"/"+nTopics+"/l_OptTopicalWordDistributions.csv");
			FileWriter fo = new FileWriter(f);
			for (int k = 0; k < nTopics; k++) {
				String text = Integer.toString(k);
				for (int w = 0; w < dataset.vocabulary.length; w++) {
					text = text + "," + Double.toString(optTopicWordDist[k][w]);
				}
				fo.write(text + "\n");
			}
			fo.close();
		} catch (Exception e) {
			System.out.println("Error in writing to topical word file!");
			e.printStackTrace();
			System.exit(0);
		}
	}
	
	public void output_LastTopicWord() {
		try {
			File f = new File(dataset.path+"/"+nTopics+"/l_LastTopicalWordDistributions.csv");
			FileWriter fo = new FileWriter(f);
			for (int k = 0; k < nTopics; k++) {
				String text = Integer.toString(k);
				for (int w = 0; w < dataset.vocabulary.length; w++) {
					text = text + "," + Double.toString(topicWordDist[k][w]);
				}
				fo.write(text + "\n");
			}
			fo.close();
		} catch (Exception e) {
			System.out.println("Error in writing to topical word file!");
			e.printStackTrace();
			System.exit(0);
		}
	}

	private void output_OptPostTopicTopWords(int k) {
		try {
			File f = new File(dataset.path +"/"+nTopics+ "/l_OptTopTopicWords.csv");
			BufferedWriter bw = new BufferedWriter(new FileWriter(f.getAbsoluteFile()));
			RankingTool rankTool = new RankingTool();
			WeightedElement[] topWords = null;
			for (int z = 0; z < nTopics; z++) {
				bw.write(z + "\n");
				topWords = rankTool.getTopKbyWeight(dataset.vocabulary, optTopicWordDist[z], k);
				for (int j = 0; j < k; j++)
					bw.write("," + topWords[j].name + "," + topWords[j].weight + "\n");
			}
			bw.close();
		} catch (Exception e) {
			System.out.println("Error in writing out post topic top words to file!");
			e.printStackTrace();
			System.exit(0);
		}
	}
	
	private void output_LastPostTopicTopWords(int k) {
		try {
			File f = new File(dataset.path +"/"+nTopics+ "/l_LastTopTopicWords.csv");
			BufferedWriter bw = new BufferedWriter(new FileWriter(f.getAbsoluteFile()));
			RankingTool rankTool = new RankingTool();
			WeightedElement[] topWords = null;
			for (int z = 0; z < nTopics; z++) {
				bw.write(z + "\n");
				topWords = rankTool.getTopKbyWeight(dataset.vocabulary, topicWordDist[z], k);
				for (int j = 0; j < k; j++)
					bw.write("," + topWords[j].name + "," + topWords[j].weight + "\n");
			}
			bw.close();
		} catch (Exception e) {
			System.out.println("Error in writing out post topic top words to file!");
			e.printStackTrace();
			System.exit(0);
		}
	}

	public void output_OptTopicInterest() {
		try {
			File f = new File(dataset.path +"/"+nTopics+ "/l_OptUserTopicalInterestDistributions.csv");
			FileWriter fo = new FileWriter(f);
			for (int u = 0; u < dataset.nUsers; u++) {
				User currUser = dataset.users[u];
				String text = currUser.userId;
				for (int k = 0; k < nTopics; k++) {
					text = text + "," + Double.toString(currUser.optTopicalInterests[k]);
				}
				fo.write(text + "\n");
			}
			fo.close();
		} catch (Exception e) {
			System.out.println("Error in writing to topical interest file!");
			e.printStackTrace();
			System.exit(0);
		}
	}
	
	public void output_LastTopicInterest() {
		try {
			File f = new File(dataset.path +"/"+nTopics+ "/l_LastUserTopicalInterestDistributions.csv");
			FileWriter fo = new FileWriter(f);
			for (int u = 0; u < dataset.nUsers; u++) {
				User currUser = dataset.users[u];
				String text = currUser.userId;
				for (int k = 0; k < nTopics; k++) {
					text = text + "," + Double.toString(currUser.topicalInterests[k]);
				}
				fo.write(text + "\n");
			}
			fo.close();
		} catch (Exception e) {
			System.out.println("Error in writing to topical interest file!");
			e.printStackTrace();
			System.exit(0);
		}
	}

	public void output_OptAuthority() {
		try {
			File f = new File(dataset.path +"/"+nTopics+ "/l_OptUserAuthorityDistributions.csv");
			FileWriter fo = new FileWriter(f);
			for (int u = 0; u < dataset.nUsers; u++) {
				User currUser = dataset.users[u];
				String text = currUser.userId;
				for (int k = 0; k < nTopics; k++) {
					text = text + "," + Double.toString(currUser.optAuthorities[k]);
				}
				fo.write(text + "\n");
			}
			fo.close();
		} catch (Exception e) {
			System.out.println("Error in writing to authority file!");
			e.printStackTrace();
			System.exit(0);
		}
	}
	
	public void output_LastAuthority() {
		try {
			File f = new File(dataset.path +"/"+nTopics+ "/l_LastUserAuthorityDistributions.csv");
			FileWriter fo = new FileWriter(f);
			for (int u = 0; u < dataset.nUsers; u++) {
				User currUser = dataset.users[u];
				String text = currUser.userId;
				for (int k = 0; k < nTopics; k++) {
					text = text + "," + Double.toString(currUser.authorities[k]);
				}
				fo.write(text + "\n");
			}
			fo.close();
		} catch (Exception e) {
			System.out.println("Error in writing to authority file!");
			e.printStackTrace();
			System.exit(0);
		}
	}

	public void output_OptHub() {
		try {
			File f = new File(dataset.path +"/"+nTopics+ "/l_OptUserHubDistributions.csv");
			FileWriter fo = new FileWriter(f);
			for (int u = 0; u < dataset.nUsers; u++) {
				User currUser = dataset.users[u];
				String text = currUser.userId;
				for (int k = 0; k < nTopics; k++) {
					text = text + "," + Double.toString(currUser.optHubs[k]);
				}
				fo.write(text + "\n");
			}
			fo.close();
		} catch (Exception e) {
			System.out.println("Error in writing to topical interest file!");
			e.printStackTrace();
			System.exit(0);
		}
	}
	
	public void output_LastHub() {
		try {
			File f = new File(dataset.path +"/"+nTopics+ "/l_LastUserHubDistributions.csv");
			FileWriter fo = new FileWriter(f);
			for (int u = 0; u < dataset.nUsers; u++) {
				User currUser = dataset.users[u];
				String text = currUser.userId;
				for (int k = 0; k < nTopics; k++) {
					text = text + "," + Double.toString(currUser.hubs[k]);
				}
				fo.write(text + "\n");
			}
			fo.close();
		} catch (Exception e) {
			System.out.println("Error in writing to topical interest file!");
			e.printStackTrace();
			System.exit(0);
		}
	}
	
	public void output_OptLikelihoodPerplexity() {
		try {
			File f = new File(dataset.path +"/"+nTopics+ "/l_OptLikelihoodPerplexity.csv");
			FileWriter fo = new FileWriter(f);
			fo.write("PostLogLikelihood:"+ postOptLogLikelidhood + "\n");
			fo.write("PostLogPerplexity:"+ postOptLogPerplexity + "\n");
			fo.close();
		} catch (Exception e) {
			System.out.println("Error in writing to topical interest file!");
			e.printStackTrace();
			System.exit(0);
		}
	}
	
	public void output_LastLikelihoodPerplexity() {
		try {
			File f = new File(dataset.path +"/"+nTopics+ "/l_LastLikelihoodPerplexity.csv");
			FileWriter fo = new FileWriter(f);
			fo.write("PostLogLikelihood:"+ postLastLogLikelidhood + "\n");
			fo.write("PostLogPerplexity:"+ postLastLogPerplexity + "\n");
			fo.close();
		} catch (Exception e) {
			System.out.println("Error in writing to topical interest file!");
			e.printStackTrace();
			System.exit(0);
		}
	}

	public void output_optPostTopic(){
		try {
			File f = new File(dataset.path +"/"+nTopics+ "/l_OptPostTopic.csv");
			FileWriter fo = new FileWriter(f);
			for (int u = 0; u < dataset.nUsers; u++) {
				User currUser = dataset.users[u];
				for (int p=0; p<currUser.nPosts; p++){
					if (currUser.postBatches[p] == batch){
						String text = currUser.posts[p].postId;
						text = text + "," + Double.toString(currUser.posts[p].topic);
						fo.write(text + "\n");
					}
				}
			}
			fo.close();
		} catch (Exception e) {
			System.out.println("Error in writing to authority file!");
			e.printStackTrace();
			System.exit(0);
		}
	}
	/***
	 * checking if the gradient computation of likelihood by user topical
	 * interest theta_{u,k} is properly implemented
	 * 
	 * @param u
	 * @param k
	 */
	public void gradCheck_TopicalInterest(int u, int k) {
		double DELTA = 1;

		double[] x = dataset.users[u].topicalInterests;

		double f = getLikelihood_topicalInterest(u, x);
		double g = gradLikelihood_topicalInterest(u, k, x[k]);

		for (int i = 1; i <= 20; i++) {
			// reduce DELTA
			DELTA *= 0.1;
			x[k] += DELTA;
			double DELTAF = getLikelihood_topicalInterest(u, x);
			double numGrad = (DELTAF - f) / DELTA;
			System.out.printf(String.format("[TopicInterest] u = %d k = %d DELTA = %.12f numGrad = %f grad = %f\n", u,
					k, DELTA, numGrad, g));
			// if grad function is implemented properly, we will see numGrad
			// gets closer to grad
			x[k] -= DELTA;

		}
	}

	/***
	 * checking if the gradient computation of likelihood by A_{v,k} is properly
	 * implemented
	 * 
	 * @param v
	 * @param k
	 */
	public void gradCheck_Authority(int v, int k) {
		double DELTA = 1;

		double[] x = dataset.users[v].authorities;
		double f = getLikelihood_authority(v, x);
		double g = gradLikelihood_authority(v, k, x[k]);

		for (int i = 1; i <= 20; i++) {
			// reduce DELTA
			DELTA *= 0.1;
			x[k] += DELTA;
			double DELTAF = getLikelihood_authority(v, x);
			double numGrad = (DELTAF - f) / DELTA;
			System.out.printf(String.format("[Authority] v= %d k = %d DELTA = %f numGrad = %f grad = %f\n", v, k, DELTA,
					numGrad, g));
			// if grad function is implemented properly, we will see numGrad
			// gets closer to grad
			x[k] -= DELTA;
		}
	}

	/***
	 * checking if the gradient computation of likelihood by H_{u,k} is properly
	 * implemented
	 * 
	 * @param u
	 * @param k
	 */
	public void gradCheck_Hub(int u, int k) {
		double DELTA = 1;

		double[] x = dataset.users[u].hubs;

		double f = getLikelihood_hub(u, x);
		double g = gradLikelihood_hub(u, k, x[k]);

		for (int i = 1; i <= 20; i++) {
			// reduce DELTA
			DELTA *= 0.1;
			x[k] += DELTA;
			double DELTAF = getLikelihood_hub(u, x);
			double numGrad = (DELTAF - f) / DELTA;
			System.out.printf(
					String.format("[Hub] u = %d k = %d DELTA = %f numGrad = %f grad = %f\n", u, k, DELTA, numGrad, g));
			// if grad function is implemented properly, we will see numGrad
			// gets closer to grad
			x[k] -= DELTA;

		}
	}

	public void altCheck_TopicalInterest(int u) {
		altOptimize_topicalInterest(u);
	}

	public void altCheck_Authority(int u) {
		altOptimize_Authorities(u);
	}

	public void altCheck_Hub(int u) {
		altOptimize_Hubs(u);
	}

	public static void main(String[] args) {
		double x = 0;
		double a = Math.log10(x);
		double b = 1 / x;
		System.out.printf("a = %f b = %f\n", a, b);

		String datasetPath = "E:/code/java/ctlr/data/synthetic/";
		int nTopics = 10;
		int batch = 1;

		larc.ctlr.model.CTLR model = new CTLR(datasetPath, nTopics, batch);
		model.init();

		Random rand = new Random();

		int u = rand.nextInt(100);
		int k = rand.nextInt(nTopics);

		// model.altCheck_TopicalInterest(u);
		// model.altCheck_Authority(u);
		// model.altCheck_Hub(u);
		model.train();
		// model.gradCheck_Authority(u, k);
		// model.gradCheck_Hub(u, k);
		// model.gradCheck_TopicalInterest(u, k);

	}
}
